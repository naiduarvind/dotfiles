# helper functions
alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"

# [kall] get all pods
alias kall="kubectl get pods --all-namespaces"

# [kwall] watch all pods
alias kwall="watch kubectl get pods --all-namespaces"

# [kp] open kubernetes dashboard with proxy
alias kp="open 'http://localhost:8001/ui' && kubectl proxy"

# [kwatch] watch resource
kwatch() {
    case "$1" in
    # TODO Add more
    nodes|no|node|ns|namespace|namespaces)
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs watch kubectl get "${1}"
    ;;
    *)
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs watch kubectl get "${1}" -n
    ;;
    esac
}

# [kdebug] start debugging in cluster
alias kdebug='kubectl run test --rm --restart=Never -it --image=ubuntu -- bash'

# [kex] execute command in container
kex() {
    arg_pair=$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    pods_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)
    pod_choosen=$(echo "$pods_out" |  tr ' ' "\n" | _inline_fzf_nh)
    eval kubectl exec -it -n "${arg_pair}" -c "${pod_choosen}" -- "$1"
}

# [kfor] port-forward a container port to your local machine
kfor() {
    if [ ! -n "$1" ]; then
        echo "Provide a port you want to forward"
        return 255
    fi

    arg_pair="$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')"
    echo "kubectl port-forward -n ${arg_pair} $1"
    eval kubectl port-forward -n "${arg_pair}" "$1"
}

# [ksearch] search for string in resources
ksearch() {
    search_query="$1"
    for ns in $(kubectl get --export -o=json ns | jq -r '.items[] | .metadata.name'); do
        kubectl --namespace="${ns}" get --export -o=json \
            deployment,ingress,daemonset,secrets,configmap,service,serviceaccount,statefulsets,pod,endpoints,customresourcedefinition,events,networkpolicies,persistentvolumeclaims,persistentvolumes,replicasets,replicationcontrollers,statefulsets,storageclasses | \
        jq '.items[]' -c | \
        grep "$search_query" | \
        jq -r  '. | [.kind, .metadata.name] | @tsv' | \
        awk -v prefix="$ns" '{print "kubectl get -n " prefix " " $0}'
    done
}

# [kwns] watch pods in a namespace
kwns() {
    local ns=""
    ns=$(kubectl get ns | _inline_fzf | awk '{print $1}')
    watch kubectl get pod -n "$ns"
}

# [khelp] show this help message
khelp() {
    echo "Usage of fubectl"
    echo
    echo "Reduces repetitive interactions with kubectl"
    echo "Find more information at https://github.com/kubermatic/fubectl"
    echo
    echo "Usage:"
    if [ -n "$ZSH_VERSION" ]
    then
        grep -E '^# \[.+\]' "${(%):-%x}"
    else
        grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
    fi
}
